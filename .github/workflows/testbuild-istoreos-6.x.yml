name: Build iStore OS for Beikeyun P1

on:
  repository_dispatch:
  workflow_dispatch:
    # inputs:
      # ssh:
        # description: 'SSH connection to Actions'
        # required: false
        # default: 'false'
  # schedule:
   # - cron: 40 15 * * 3

env:
  REPO_URL: https://github.com/istoreos/istoreos
  FEEDS_CONF: feeds.conf
  CONFIG_FILE: .config
  DIY_P1_SH: diy/diy-6.x-part1.sh
  DIY_P2_SH: diy/diy-6.x-part2.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        REPO_BRANCH:
          - istoreos-24.10

    steps:
    - name: ÂêàÂπ∂Á£ÅÁõò
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: ÂáÜÂ§áÂÆåÊàê
      uses: actions/checkout@main

    - name: ÂàõÂª∫Â∑•‰ΩúÁõÆÂΩï
      run: |
        mkdir -p ${GITHUB_WORKSPACE}/workdir
        chmod 755 ${GITHUB_WORKSPACE}/workdir
        echo "WORKDIR=$PWD" >> $GITHUB_ENV

    - name: Ê£ÄÊü•ÊúçÂä°Âô®ÈÖçÁΩÆ
      run: |
        echo "Ëã•ÂàÜÈÖçÁöÑÊúçÂä°Âô®ÊÄßËÉΩ‰∏çË∂≥ÔºåÂä°ÂøÖÂèäÊó∂ÂèñÊ∂àÔºåÈáçÊñ∞ËøêË°åÔºÅ"
        echo -e "------------------------------- CPU‰ø°ÊÅØ -------------------------------\n"
        echo "CPUÁâ©ÁêÜÊï∞Èáè:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPUÊ†∏ÂøÉÂèäÁâàÊú¨‰ø°ÊÅØ: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo -e "------------------------------- ÂÜÖÂ≠ò‰ø°ÊÅØ -------------------------------\n"
        echo "Â∑≤ÂÆâË£ÖÂÜÖÂ≠òËØ¶ÁªÜ‰ø°ÊÅØ: "
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo -e "------------------------------- Á£ÅÁõò‰ø°ÊÅØ -------------------------------\n"
        echo -e "Á£ÅÁõòÊï∞Èáè: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "------------------------------- Á£ÅÁõòËØ¶ÊÉÖ -------------------------------\n"
        df -Th

    - name: ÂàùÂßãÂåñÁºñËØëÁéØÂ¢É
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "------------------------------- Êõ¥Êñ∞Âπ∂ÂÆâË£Ö‰æùËµñ -------------------------------"
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(cat $GITHUB_WORKSPACE/depends/ubuntu-22.04)
        wget https://bootstrap.pypa.io/pip/3.6/get-pip.py
        sudo python3 get-pip.py
        sudo rm -rf get-pip.py
        sudo pip install pyelftools
        echo "------------------------------- Ê∏ÖÁêÜDockerÈïúÂÉèÂíåËΩØ‰ª∂ -------------------------------"
        docker rmi `docker images -q`
        docker image prune -a -f
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        echo "------------------------------- ËÆæÁΩÆÊó∂Âå∫ -------------------------------"
        sudo timedatectl set-timezone "$TZ"

    - name: ÂÖãÈöÜÊ∫êÁ†Å
      working-directory: ${{ env.WORKDIR }}/workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b ${{ matrix.REPO_BRANCH }} openwrt
        ln -sf ${{ env.WORKDIR }}/workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: ÁºìÂ≠òÊûÑÂª∫Âä®‰Ωú
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: ubuntu-22.04-armv8-${{ matrix.REPO_BRANCH }}
        prefix: ${{ github.workspace }}/openwrt

    - name: Âä†ËΩΩËá™ÂÆö‰πâ feeds
      env:
        FEEDS_CONF_PATH: armv8/${{ env.FEEDS_CONF }}
      run: |
        [ -e $FEEDS_CONF_PATH ] && mv $FEEDS_CONF_PATH openwrt/$FEEDS_CONF
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Êõ¥Êñ∞ feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: ÂÆâË£Ö feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Âä†ËΩΩËá™ÂÆö‰πâÈÖçÁΩÆ
      env:
        CONFIG_FILE_PATH: armv8/${{ env.CONFIG_FILE }}
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE_PATH ] && mv $CONFIG_FILE_PATH openwrt/$CONFIG_FILE
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    # - name: SSH ËøûÊé•Âà∞ Actions
      # uses: P3TERX/ssh2actions@main
      # if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      # env:
        # TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        # TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: ‰∏ãËΩΩËΩØ‰ª∂ÂåÖ
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: ÁºñËØëÂõ∫‰ª∂
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        # ËÆæÁΩÆÊûÑÂª∫Êó∂Èó¥Êà≥ÔºåÂè™‰ΩøÁî®Âπ¥ÊúàÊó•Êó∂
        echo "BUILD_TIME=$(date +"%Y%m%d%H")" >> $GITHUB_ENV
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: Ê£ÄÊü•Á£ÅÁõòÁ©∫Èó¥
      if: (!cancelled())
      run: df -hT

    - name: ‰∏ä‰º† bin Êñá‰ª∂Â§π
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: ${{ matrix.REPO_BRANCH }}-${{ env.BUILD_TIME }}-bin
        path: openwrt/bin

    - name: Êï¥ÁêÜÂõ∫‰ª∂Êñá‰ª∂
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: ÈáçÂëΩÂêçÂõ∫‰ª∂Âπ∂ÁîüÊàê sha256
      id: rename_firmware
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        cd ${{ env.FIRMWARE }}
        for file in *beikeyun-p1-squashfs-sysupgrade.img.gz; do
          if [ -f "$file" ]; then
            new_name="${{ matrix.REPO_BRANCH }}-${{ env.BUILD_TIME }}-beikeyun-p1-squashfs-sysupgrade.img.gz"
            mv "$file" "$new_name"
            sha256sum "$new_name" > "$new_name.sha256sums"
            echo "ÁîüÊàê: $new_name Âèä $new_name.sha256sums"
            echo "NEW_FIRMWARE_NAME=$new_name" >> $GITHUB_ENV
            echo "NEW_SHA256_FILE=$new_name.sha256sums" >> $GITHUB_ENV
          fi
        done
        echo "status=success" >> ${GITHUB_OUTPUT}
        
    - name: ÁîüÊàê manifest.json
      id: gen_manifest
      if: steps.rename_firmware.outputs.status == 'success' && !cancelled()
      run: |
        cd ${{ env.FIRMWARE }}
        manifest_name="${{ matrix.REPO_BRANCH }}-${{ env.BUILD_TIME }}-beikeyun-p1-manifest.json"
        cat > "$manifest_name" <<EOF
        {
          "version": "${{ matrix.REPO_BRANCH }}-${{ env.BUILD_TIME }}",
          "device": "beikeyun-p1",
          "files": [
            {
              "name": "${{ env.NEW_FIRMWARE_NAME }}",
              "url": "https://github.com/${{ github.repository }}/releases/download/istoreos-beikeyun-p1/${{ env.NEW_FIRMWARE_NAME }}",
              "sha256": "$(sha256sum ${{ env.NEW_FIRMWARE_NAME }} | awk '{print $1}')"
            }
          ]
        }
        EOF
        echo "ÁîüÊàê $manifest_name ÂÆåÊàê"
        echo "NEW_MANIFEST=$manifest_name" >> $GITHUB_ENV


    - name: ‰∏ä‰º†Âõ∫‰ª∂ÁõÆÂΩï
      uses: actions/upload-artifact@main
      if: steps.gen_manifest.outputs.status != 'cancelled'
      with:
        name: ${{ matrix.REPO_BRANCH }}-${{ env.BUILD_TIME }}-firmware
        path: |
          ${{ env.FIRMWARE }}/${{ env.NEW_FIRMWARE_NAME }}
          ${{ env.FIRMWARE }}/${{ env.NEW_SHA256_FILE }}
          ${{ env.FIRMWARE }}/${{ env.NEW_MANIFEST }}

    - name: ÁîüÊàêÂèëÂ∏É‰ø°ÊÅØ
      id: release_info
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        cat > release_body.txt <<EOF
        üéØ ËÆæÂ§á: Ë¥ùÂ£≥‰∫ë P1 (Beikeyun P1)
        üñ•Ô∏è Êû∂ÊûÑ: rockchip-armv8
        üîÄ Ê∫êÁ†ÅÂàÜÊîØ: ${{ matrix.REPO_BRANCH }}
        üìÇ Ê∫êÁ†Å‰ªìÂ∫ì: ${{ env.REPO_URL }}
        üïí ÁºñËØëÊó∂Èó¥: $(date +"%YÂπ¥%mÊúà%dÊó•%HÊó∂")
        ---
        Ê≠§Âõ∫‰ª∂‰∏ì‰∏∫Ë¥ùÂ£≥‰∫ë P1 ËÆæÂ§áÁºñËØë„ÄÇ
        EOF
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: Ëá™Âä®ÂèëÂ∏ÉÂõ∫‰ª∂Âà∞ Releases
      uses: softprops/action-gh-release@v2
      if: steps.release_info.outputs.status == 'success' && !cancelled()
      with:
        tag_name: "istoreos-beikeyun-p1"
        release_name: "iStoreOS for Beikeyun P1"
        body_path: release_body.txt
        files: |
          ${{ env.FIRMWARE }}/${{ env.NEW_FIRMWARE_NAME }}
          ${{ env.FIRMWARE }}/${{ env.NEW_SHA256_FILE }}
          ${{ env.FIRMWARE }}/${{ env.NEW_MANIFEST }}
        overwrite: false
        draft: false
        prerelease: false

